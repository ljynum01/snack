<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.snacksback.mapper.OrderMapper">
  <resultMap id="BaseResultMap" type="com.example.snacksback.model.Orders">
    <id column="did" jdbcType="INTEGER" property="did" />
    <result column="cid" jdbcType="INTEGER" property="cid" />
    <result column="uid" jdbcType="INTEGER" property="uid" />
    <result column="dtime" jdbcType="DATE" property="dtime" />
    <result column="dstateid" jdbcType="INTEGER" property="dstateid" />
    <result column="status" jdbcType="INTEGER" property="status" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    did, cid, uid, dtime, dstateid, status
  </sql>
  <select id="selectByExample" parameterType="com.example.snacksback.model.OrdersExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from orders
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      orders by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from orders
    where did = #{did,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from orders
    where did = #{did,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.snacksback.model.OrdersExample">
    delete from orders
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.snacksback.model.Orders">
    insert into orders (did, cid, uid,
      dtime, dstateid, status, number, sid
      )
    values (#{did,jdbcType=INTEGER}, #{cid,jdbcType=INTEGER}, #{uid,jdbcType=INTEGER}, 
      #{dtime,jdbcType=DATE}, #{dstateid,jdbcType=INTEGER}, #{status,jdbcType=INTEGER},
      #{number,jdbcType=INTEGER}, #{sid,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.snacksback.model.Orders">
    insert into orders
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="did != null">
        did,
      </if>
      <if test="cid != null">
        cid,
      </if>
      <if test="uid != null">
        uid,
      </if>
      <if test="dtime != null">
        dtime,
      </if>
      <if test="dstateid != null">
        dstateid,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="number != null">
        number,
      </if>
      <if test="sid != null">
        sid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="did != null">
        #{did,jdbcType=INTEGER},
      </if>
      <if test="cid != null">
        #{cid,jdbcType=INTEGER},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="dtime != null">
        #{dtime,jdbcType=DATE},
      </if>
      <if test="dstateid != null">
        #{dstateid,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="number != null">
        #{number,jdbcType=INTEGER},
      </if>
      <if test="sid != null">
        #{sid,jdcbType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.snacksback.model.OrdersExample" resultType="java.lang.Long">
    select count(*) from orders
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update orders
    <set>
      <if test="record.did != null">
        did = #{record.did,jdbcType=INTEGER},
      </if>
      <if test="record.cid != null">
        cid = #{record.cid,jdbcType=INTEGER},
      </if>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.dtime != null">
        dtime = #{record.dtime,jdbcType=DATE},
      </if>
      <if test="record.dstateid != null">
        dstateid = #{record.dstateid,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update orders
    set did = #{record.did,jdbcType=INTEGER},
      cid = #{record.cid,jdbcType=INTEGER},
      uid = #{record.uid,jdbcType=INTEGER},
      dtime = #{record.dtime,jdbcType=DATE},
      dstateid = #{record.dstateid,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.snacksback.model.Orders">
    update orders
    <set>
      <if test="cid != null">
        cid = #{cid,jdbcType=INTEGER},
      </if>
      <if test="uid != null">
        uid = #{uid,jdbcType=INTEGER},
      </if>
      <if test="dtime != null">
        dtime = #{dtime,jdbcType=DATE},
      </if>
      <if test="dstateid != null">
        dstateid = #{dstateid,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where did = #{did,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.snacksback.model.Orders">
    update orders
    set cid = #{cid,jdbcType=INTEGER},
      uid = #{uid,jdbcType=INTEGER},
      dtime = #{dtime,jdbcType=DATE},
      dstateid = #{dstateid,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER}
    where did = #{did,jdbcType=INTEGER}
  </update>
  
  <resultMap id="orderMap" type="com.example.snacksback.model.Orders">
    <id property="did" column="did"/>
    <result property="uid" column="uid"/>
    <result property="dtime" column="dtime"/>
    <result property="status" column="status"/>
    <result property="number" column="number"/>
    <association property="consumer"
                 select="com.example.snacksback.mapper.ConsumerMapper.selectByPrimaryKey"
                 column="uid"/>
    <association property="goods"
                 select="com.example.snacksback.mapper.GoodsMapper.findGoodsByid"
                 column="cid"/>
    <association property="merchant"
                 select="com.example.snacksback.mapper.MerchantMapper.selectByPrimaryKey"
                 column="lid"/>
  </resultMap>



  <select id="findByUid" resultMap="orderMap">
    select * from orders where uid = #{uid}
  </select>

  <select id="findAllBySid" resultMap="orderMap">
    select * from orders where sid = #{sid}
  </select>

  <select id="findAllByUid" resultMap="orderMap">
    select * from orders where uid = #{uid}
  </select>

  <select id="findAll" resultMap="orderMap">
    select * from orders
  </select>

  <select id="findBySidAndStatus" resultMap="orderMap">
    select * from orders
    <where>
      <if test="status!=null and status>=0">
      and status = #{status}
      </if>
      <if test="sid!=null and sid!=''">
        and sid = #{sid}
      </if>

    </where>

  </select>

</mapper>